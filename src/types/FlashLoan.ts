/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Account {
  export type InfoStruct = { owner: string; number: BigNumberish };

  export type InfoStructOutput = [string, BigNumber] & {
    owner: string;
    number: BigNumber;
  };
}

export interface FlashLoanInterface extends utils.Interface {
  contractName: "FlashLoan";
  functions: {
    "callFunction(address,(address,uint256),bytes)": FunctionFragment;
    "flashUser()": FunctionFragment;
    "initiateFlashLoan(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callFunction",
    values: [string, Account.InfoStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "flashUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initiateFlashLoan",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "callFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateFlashLoan",
    data: BytesLike
  ): Result;

  events: {
    "Log(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
}

export type LogEvent = TypedEvent<
  [string, BigNumber],
  { message: string; val: BigNumber }
>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface FlashLoan extends BaseContract {
  contractName: "FlashLoan";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlashLoanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callFunction(
      sender: string,
      account: Account.InfoStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashUser(overrides?: CallOverrides): Promise<[string]>;

    initiateFlashLoan(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callFunction(
    sender: string,
    account: Account.InfoStruct,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashUser(overrides?: CallOverrides): Promise<string>;

  initiateFlashLoan(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callFunction(
      sender: string,
      account: Account.InfoStruct,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    flashUser(overrides?: CallOverrides): Promise<string>;

    initiateFlashLoan(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Log(string,uint256)"(message?: null, val?: null): LogEventFilter;
    Log(message?: null, val?: null): LogEventFilter;
  };

  estimateGas: {
    callFunction(
      sender: string,
      account: Account.InfoStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashUser(overrides?: CallOverrides): Promise<BigNumber>;

    initiateFlashLoan(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callFunction(
      sender: string,
      account: Account.InfoStruct,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateFlashLoan(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
